#+title: Luhn Algorithm

* Initial ideas

#+begin_src emacs-lisp
  ELISP> (make-list 16 '(t nil))
  ((t nil)
   (t nil)
   (t nil)
   (t nil)
   (t nil)
   (t nil)
   (t nil)
   (t nil)
   (t nil)
   (t nil)
   (t nil)
   (t nil)
   (t nil)
   (t nil)
   (t nil)
   (t nil))

  ELISP> (let ((str-length 16)
               (pattern '(t nil)))
           (flatten-tree (make-list str-length pattern)))
  (t t t t t t t t t t t t t t t t)

  ELISP> (let* ((str-length 16)
                (pattern '(t nil))
                (n-repeat (/ str-length (length pattern))))
           (flatten-tree (make-list n-repeat pattern)))
  (t t t t t t t t)

  ELISP> (let* ((str-length 16)
                (pattern '(:true :false))
                (n-repeat (/ str-length (length pattern))))
           (flatten-tree (make-list n-repeat pattern)))
  (:true :false :true :false :true :false :true :false :true :false :true
         :false :true :false :true :false)
#+end_src

There's probably a better way of flattening a list of lists, but the idea is
that I should be able to =zip= this alternating =t=​/​=nil= list with the =str=
argument to =luhn-p= in order to know which numbers to double. It would be
really simple to apply a function to that zipped list (probably an alist)
separately to the =t=- and =nil=-associated numbers, and because addition is
associative, I can add those lists separately. I could do something like

#+begin_src emacs-lisp
  (let ((digits (mapcar #'string-to-number str))
        (luhn-divisor 10))
    (defun luhn-helper (digits double-p acc)
      (let* ((digit (car digits))
             (luhn-max 9)
             (luhn-mult 2)
             (luhn-intermediate-result (* digit luhn-mult))
             (luhn-result (if (> luhn-intermediate-result luhn-max)
                              (- luhn-intermediate-result luhn-max)
                            luhn-intermediate-result)))
        (cond ((and digit double-p)
               (luhn-helper (cdr digits) nil (cons luhn-result acc)))
              (digit (luhn-helper (cdr digits) t (cons digit acc)))
              (t acc))))
    (zerop (mod (apply #'+ (luhn-helper digits t '())) luhn-divisor)))
#+end_src

Ok, that didn't actually work, so I'm going to try to figure that out before
moving onto my original idea.

#+begin_example
FFFFFFF..FFFFFFFFF

F 16-digits-valid-luhn-number
    (wrong-type-argument stringp 49)

F a-valid-3-digit-input-that-can-be-reversed
    (wrong-type-argument stringp 48)

F a-valid-luhn-number
    (wrong-type-argument stringp 52)

F an-empty-string
    (wrong-type-argument number-or-marker-p nil)

F an-invalid-11-digit-number
    (wrong-type-argument stringp 52)

F an-invalid-3-digit-input
    (wrong-type-argument stringp 48)

F another-single-digit
    (wrong-type-argument stringp 57)

F invalid-16-digit-luhn-number
    (wrong-type-argument stringp 49)

F invalid-long-number-with-a-remainder-divisble-by-5
    (wrong-type-argument stringp 49)

F multiple-zeros
    (wrong-type-argument stringp 48)

F multiple-zeros-with-space
    (wrong-type-argument stringp 48)

F single-digit
    (wrong-type-argument stringp 48)

F single-digit-with-space
    (wrong-type-argument stringp 48)

F space-only
    (wrong-type-argument stringp 32)

F valid-luhn-with-an-odd-number-of-digits-and-non-zero-first-digit
    (wrong-type-argument stringp 49)

F very-long-input-is-valid
    (wrong-type-argument stringp 57)
#+end_example

From =luhn-test.el=:

#+begin_src emacs-lisp
  (ert-deftest single-digit-with-space ()
    (should-not (luhn-p "0  ")))

  (ert-deftest multiple-zeros ()
    (should (luhn-p "0000")))

  (ert-deftest multiple-zeros-with-space ()
    (should (luhn-p "0 0 0")))

  (ert-deftest a-valid-3-digit-input-that-can-be-reversed ()
    (should (luhn-p "059")))

  (ert-deftest an-invalid-3-digit-input ()
    (should-not (luhn-p "095")))
#+end_src

#+begin_src emacs-lisp
  ELISP> (luhn-p "0 0 0")
  ,*** Eval error ***  Wrong type argument: stringp, 48
  ELISP> (mapcar #'string-to-number "0 0 0")
  ,*** Eval error ***  Wrong type argument: stringp, 48
  ELISP> (mapcar #'string-to-number "059")
  ,*** Eval error ***  Wrong type argument: stringp, 48
  ELISP> (mapcar #'string-to-number  (mapcar #'string "059"))
  (0 5 9)

  ELISP> (mapcar #'string-to-number  (mapcar #'string "0 5 9"))
  (0 0 5 0 9)
#+end_src

Ah, that makes sense. I guess I'll have to filter out spaces first.

#+begin_quote
Aside: I just noticed that I've been making a mistake in writing my own ERT
tests: I've been writing

#+begin_src emacs-lisp
  (should (equal t (<some function> ...)))
  (should (equal nil (<some function> ...)))
#+end_src

when I should have been writing

#+begin_src emacs-lisp
  (should (<some function> ...))
  (should-not (<some function> ...))
#+end_src

when a function returns =t= or =nil=.
#+end_quote

Anyway, time to fix =luhn-p= version 1.

#+begin_src emacs-lisp
  (defun luhn-p (str)
    "Apply Luhn algorithm to STR: double every other number; if the result is
  greater than 9, subtract 9; sum the resulting list, and if the sum is evenly
  divisible by 10, return T; otherwise, return NIL."
    (let ((digits
           (mapcar #'string-to-number
                   (seq-filter
                    #'(lambda (s) (not (string= " " s)))
                    (mapcar #'string str))))
          (luhn-divisor 10))
      (defun luhn-helper (digits double-p acc)
        (let ((digit (car digits)))
          (cond ((and digit double-p)
                 (let* ((luhn-max 9)
                        (luhn-mult 2)
                        (luhn-intermediate-result (* digit luhn-mult))
                        (luhn-result (if (> luhn-intermediate-result luhn-max)
                                         (- luhn-intermediate-result luhn-max)
                                       luhn-intermediate-result)))
                   (luhn-helper (cdr digits) nil (cons luhn-result acc))))
                (digit (luhn-helper (cdr digits) t (cons digit acc)))
                (t acc))))
      (print (format "digits: %s" digits))
      (zerop (mod (apply #'+ (luhn-helper digits t '())) luhn-divisor))))
#+end_src

I was having an issue where I was performing numerical operations on =nil=, so
I had to move the Luhn-related number until later.

#+begin_src emacs-lisp
  (defun luhn-p (str)
    "Apply Luhn algorithm to STR: double every other number; if the result is
  greater than 9, subtract 9; sum the resulting list, and if the sum is evenly
  divisible by 10, return T; otherwise, return NIL."
    (let ((luhn-max 9)
          (luhn-mult 2)
          (digits
           (mapcar #'string-to-number
                   (seq-filter
                    #'(lambda (s) (not (string= " " s)))
                    (mapcar #'string str))))
          (luhn-divisor 10))
      (defun luhn-helper (digits double-p acc)
        (let ((digit (car digits)))
          (cond ((and digit double-p)
                 (let* ((luhn-intermediate-result (* digit luhn-mult))
                        (luhn-result (if (> luhn-intermediate-result luhn-max)
                                         (- luhn-intermediate-result luhn-max)
                                       luhn-intermediate-result)))
                   (luhn-helper (cdr digits) nil (cons luhn-result acc))))
                (digit (luhn-helper (cdr digits) t (cons digit acc)))
                (t acc))))
      (print (format "digits: %s" digits))
      (zerop (mod (apply #'+ (luhn-helper digits t '())) luhn-divisor))))
#+end_src

Totally arbitary, but I like this order better.

Still having issues though; here's one of them:

#+begin_example
  ELISP> (luhn-p "")

  "digits: nil"

  t
  ELISP> (luhn-p "0   ")

  "digits: (0)"

  t
  ELISP> (luhn-p "   ")

  "digits: nil"
#+end_example

It's happening because

#+begin_src emacs-lisp
  ELISP> (apply #'+ nil)
  0 (#o0, #x0, ?\C-@)
#+end_src

I can fix that with

#+begin_src emacs-lisp
  (and digits
       (zerop (mod (apply #'+ (luhn-helper digits t '())) luhn-divisor)))
#+end_src

[Note that this is better than =(if digits (zerop ...) nil)=.]

Still getting errors with

#+begin_src emacs-lisp
  (defun luhn-p (str)
    "Apply Luhn algorithm to STR: double every other number; if the result is
  greater than 9, subtract 9; sum the resulting list, and if the sum is evenly
  divisible by 10, return T; otherwise, return NIL."
    (let ((luhn-max 9)
          (luhn-mult 2)
          (digits
           (mapcar #'string-to-number
                   (seq-filter
                    #'(lambda (s) (not (string= " " s)))
                    (mapcar #'string str))))
          (luhn-divisor 10))
      (defun luhn-helper (digits double-p acc)
        (let ((digit (car digits)))
          (cond ((and digit double-p)
                 (let* ((luhn-intermediate-result (* digit luhn-mult))
                        (luhn-result (if (> luhn-intermediate-result luhn-max)
                                         (- luhn-intermediate-result luhn-max)
                                       luhn-intermediate-result)))
                   (luhn-helper (cdr digits) nil (cons luhn-result acc))))
                (digit (luhn-helper (cdr digits) t (cons digit acc)))
                (t acc))))
      ;; (print (format "digits: %s" digits))
      (and digits
           (zerop (mod (apply #'+ (luhn-helper digits t '())) luhn-divisor)))))
#+end_src

#+begin_example
.FF..F.FF....FF.F.

F a-valid-3-digit-input-that-can-be-reversed
    (ert-test-failed
     ((should
       (luhn-p "059"))
      :form
      (luhn-p "059")
      :value nil))

F a-valid-luhn-number
    (ert-test-failed
     ((should
       (luhn-p "49927398716"))
      :form
      (luhn-p "49927398716")
      :value nil))

F an-invalid-3-digit-input
    (ert-test-failed
     ((should-not
       (luhn-p "095"))
      :form
      (luhn-p "095")
      :value t))

F input-string-containing-a-letter-in-the-middle
    (ert-test-failed
     ((should-error
       (luhn-p "1234567a45670"))
      :form
      (luhn-p "1234567a45670")
      :value nil :fail-reason "did not signal an error"))

F input-string-containing-a-punctuation-in-the-middle
    (ert-test-failed
     ((should-error
       (luhn-p "12_45678!!@45670"))
      :form
      (luhn-p "12_45678!!@45670")
      :value nil :fail-reason "did not signal an error"))

F single-digit
    (ert-test-failed
     ((should-not
       (luhn-p "0"))
      :form
      (luhn-p "0")
      :value t))

F single-digit-with-space
    (ert-test-failed
     ((should-not
       (luhn-p "0  "))
      :form
      (luhn-p "0  ")
      :value t))

F valid-luhn-with-an-odd-number-of-digits-and-non-zero-first-digit
    (ert-test-failed
     ((should
       (luhn-p "109"))
      :form
      (luhn-p "109")
      :value nil))
#+end_example

I think I'm doubling the wrong numbers, so start with =nil= instead of =t=?

Here's what I'm getting now:

#+begin_example
  F......FF....FF...

  F 16-digits-valid-luhn-number
      (ert-test-failed
       ((should
         (luhn-p "1234567812345670"))
        :form
        (luhn-p "1234567812345670")
        :value nil))

  F input-string-containing-a-letter-in-the-middle
      (ert-test-failed
       ((should-error
         (luhn-p "1234567a45670"))
        :form
        (luhn-p "1234567a45670")
        :value nil :fail-reason "did not signal an error"))

  F input-string-containing-a-punctuation-in-the-middle
      (ert-test-failed
       ((should-error
         (luhn-p "12_45678!!@45670"))
        :form
        (luhn-p "12_45678!!@45670")
        :value nil :fail-reason "did not signal an error"))

  F single-digit
      (ert-test-failed
       ((should-not
         (luhn-p "0"))
        :form
        (luhn-p "0")
        :value t))

  F single-digit-with-space
      (ert-test-failed
       ((should-not
         (luhn-p "0  "))
        :form
        (luhn-p "0  ")
        :value t))
#+end_example

So it looks like one useful thing to do would be to define
=string-to-number-or-error=, which I can then map onto the string that's had
the spaces trimmed.

This could be tricky because

#+begin_example
  ELISP> (string-to-number "a")
  0 (#o0, #x0, ?\C-@)
#+end_example

I'd originally wanted to try

#+begin_src emacs-lisp
  (defun string-to-number-or-error (s)
    "Converts string S to a number or raises an error."
    (or (string-to-number s)
        (error (format "'%s' is not a number." s))))
#+end_src

#+begin_src emacs-lisp
  ELISP> (string-to-number-or-error "a")
  0 (#o0, #x0, ?\C-@)
#+end_src

But that doesn't work.

#+begin_src emacs-lisp
  ELISP> (string-to-number "4a")
  4 (#o4, #x4, ?\C-d)
#+end_src

That's important to note too.

#+begin_src emacs-lisp
  (defun string-to-number-or-error (s)
    "Converts string S to a number or raises an error."
    (let ((s2n (string-to-number s)))
      (if (and (zerop s2n) (not (string= "0" s)))
          (error (format "'%s' is not a number." s))
        s2n)))
#+end_src

#+begin_src emacs-lisp
  ELISP> (string-to-number-or-error "a")
  ,*** Eval error ***  ’a’ is not a number.
  ELISP> (string-to-number-or-error "0")
  0 (#o0, #x0, ?\C-@)
  ELISP> (string-to-number-or-error "4")
  4 (#o4, #x4, ?\C-d)
  ELISP> (string-to-number-or-error "4a")
  4 (#o4, #x4, ?\C-d)
#+end_src

That works *if* you're going character by character (which I am), but it
doesn't work for anything longer.

This is how we're doing by replacing =string-to-number= with
=string-to-number-or-error=:

#+begin_example
  F............FF...

  F 16-digits-valid-luhn-number
      (ert-test-failed
       ((should
         (luhn-p "1234567812345670"))
        :form
        (luhn-p "1234567812345670")
        :value nil))

  F single-digit
      (ert-test-failed
       ((should-not
         (luhn-p "0"))
        :form
        (luhn-p "0")
        :value t))

  F single-digit-with-space
      (ert-test-failed
       ((should-not
         (luhn-p "0  "))
        :form
        (luhn-p "0  ")
        :value t))
#+end_example

Well, I just noticed this in the problem description: "The first step of the
Luhn algorithm is to double every second digit, *starting from the right.*" My
algorithm starts from the left. Fixed that with a little =reverse=; still
failing on zeros.

#+begin_example
  .............FF...

  F single-digit
      (ert-test-failed
       ((should-not
         (luhn-p "0"))
        :form
        (luhn-p "0")
        :value t))

  F single-digit-with-space
      (ert-test-failed
       ((should-not
         (luhn-p "0  "))
        :form
        (luhn-p "0  ")
        :value t))
#+end_example

Should've read more carefully, there's also this: "Strings of length 1 or less
are not valid. Spaces are allowed in the input, but they should be stripped
before checking. All other non-digit characters are disallowed."

* Refactoring

Checking for valid characters:

#+begin_src emacs-lisp
  (defun valid-luhn-char-p (c)
    "For char C, return T if it is a digit or space; otherwise, return NIL."
    (let ((valid-chars
           (append '(" ") (mapcar #'string (number-sequence ?0 ?9)))))
      (seq-some #'(lambda (char) (string= char (string c))) valid-chars)))
#+end_src

#+begin_src emacs-lisp
  ELISP> (valid-luhn-char-p ?0)
  t
  ELISP> (valid-luhn-char-p ?A)
  nil
  ELISP> (valid-luhn-char-p (string-to-char " "))
  t
#+end_src
