#+title: Phone Number

* First attempt

#+begin_src emacs-lisp
  (defun number-match (num)
    "Perform STRING-MATCH on NANP phone number, NUM, to match area code, exchange
  code, and subscriber number."
    (string-match (concat ".*\\([2-9][0-9]\\{2\\}\\)[ -.)]*"
                          "\\([2-9][0-9]\\{2\\}\\)[ -.]*"
                          "\\([0-9]\\{4\\}\\)")
                  num))

  (defun numbers (num)
    "Transform string NUM representing a NANP phone number."
    (number-match num)
    (replace-match "\\1\\2\\3" nil nil num))

  (defun area-code (num)
    (number-match num)
    (replace-match "\\1" nil nil num))

  (defun pprint (num)
    (number-match num)
    (replace-match "\\(\\1\\) \\2-\\3"))
#+end_src

#+begin_src emacs-lisp
  ELISP> (numbers "+1 (613)-995-0253")
  "6139950253"
  ELISP> (pprint (numbers "+1 (613)-995-0253"))
  ,*** Eval error ***  Args out of range: 0, 10
#+end_src

* Attempt #2

#+begin_src emacs-lisp
  (defun numbers (num)
    "Transform string NUM representing a NANP phone number."
    (string-match (concat ".*\\([2-9][0-9]\\{2\\}\\)[ -.)]*"
                          "\\([2-9][0-9]\\{2\\}\\)[ -.]*"
                          "\\([0-9]\\{4\\}\\)")
                  num)
    (replace-match "\\1\\2\\3" nil nil num))

  (defun area-code (num)
    (let ((clean-numbers (numbers num)))
      (string-match "^\\([[:digit:]]\\{3\\}\\)" clean-numbers)
      (replace-match "\\1" nil nil clean-numbers)))

  (defun pprint (num)
    (string-match (concat "\\([[:digit:]]\\{3\\}\\)"
                          "\\([[:digit:]]\\{3\\}\\)"
                          "\\([[:digit:]]\\{4\\}\\)")
                  (numbers num))
    (replace-match "\\(\\1\\) \\2-\\3"))
#+end_src

#+begin_src emacs-lisp
  ELISP> (numbers "+1 (613)-995-0253")
  "6139950253"
  ELISP> (area-code "+1 (613)-995-0253")
  "6139950253"
  ELISP> (type-of (numbers "+1 (613)-995-0253"))
  string
  ELISP> (pprint "+1 (613)-995-0253")
  ,*** Eval error ***  Args out of range: 0, 10
#+end_src

#+begin_src emacs-lisp
  (defun pprint (num)
    (let ((clean (numbers num)))
      (string-match (concat "\\([[:digit:]]\\{3\\}\\)"
                            "\\([[:digit:]]\\{3\\}\\)"
                            "\\([[:digit:]]\\{4\\}\\)")
                    clean)
      (replace-match "\\(\\1\\) \\2-\\3" nil nil clean)))
#+end_src

#+begin_src emacs-lisp
  ELISP> (pprint "+1 (613)-995-0253")
  ,*** Eval error ***  Invalid use of ‘\’ in replacement text
#+end_src

#+begin_src emacs-lisp
  ELISP> (pprint "+1 (613)-995-0253")
  "(613) 995-0253"
#+end_src

#+begin_src emacs-lisp
  (defun area-code (num)
    (let ((clean (numbers num)))
      (string-match "^\\([[:digit:]]\\{3\\}\\).+" clean)
      (replace-match "\\1" nil nil clean)))
#+end_src

#+begin_src emacs-lisp
  ELISP> (area-code "+1 (613)-995-0253")
  "613"
#+end_src

** Error in some of test suite functions?
From =phone-number-test.el=:

#+begin_src emacs-lisp
  (ert-deftest area-code-test ()
    (should (equal (area-code "1234567890") "123")))

  (ert-deftest pprint-test ()
    (should (equal (pprint "1234567890") "(123) 456-7890")))


  (ert-deftest pprint-full-us-phone-number-test ()
    (should (equal (pprint "11234567890") "(123) 456-7890")))
#+end_src

From =README.md=:

#+begin_src markdown
  The format is usually represented as

  ```text
  (NXX)-NXX-XXXX
  ```

  where `N` is any digit from 2 through 9 and `X` is any digit from 0 through 9.
#+end_src

* Handling invalid input

#+begin_src emacs-lisp
  (defun numbers (num)
    "Transform string NUM representing a NANP phone number."
    (let* ((nanp-length 10)
           (separator "[ .-]?")
           (country-code "\\(\\+?1\\)?")
           (area-code "[(]?\\([2-9][0-9]\\{2\\}\\)[)]?")
           (exchange-code "\\([2-9][0-9]\\{2\\}\\)")
           (subscriber-number "\\([0-9]\\{4\\}\\)")
           (nanp-regexp (concat country-code
                                separator
                                area-code
                                separator
                                exchange-code
                                separator
                                subscriber-number))
           (match (string-match nanp-regexp num)))
      (cond (match (replace-match "\\2\\3\\4" nil nil num))
            (t (make-string nanp-length ?0)))))
#+end_src

#+begin_src emacs-lisp
  ELISP> (numbers "+1 (613)-995-0253")
  "6139950253"
  ELISP> (numbers "+1 (613)-???-0253")
  "0000000000"
#+end_src

To handle what I see as the issues with the test suite, I've done the
following:

#+begin_src emacs-lisp
  (defun numbers (num &optional strict)
    "Transform string NUM representing a NANP phone number."
    (let* ((nanp-length 10)
           (separator "[ .-]?")
           (country-code "\\(\\+?1\\)?")
           (area-code-strict "[(]?\\([2-9][0-9]\\{2\\}\\)[)]?")
           (area-code-lax "[(]?\\([0-9]\\{3\\}\\)[)]?")
           (area-code (if strict area-code-strict area-code-lax))
           (exchange-code-strict "\\([2-9][0-9]\\{2\\}\\)")
           (exchange-code-lax "\\([0-9]\\{3\\}\\)")
           (exchange-code (if strict exchange-code-strict exchange-code-lax))
           (subscriber-number "\\([0-9]\\{4\\}\\)")
           (nanp-regexp (concat country-code
                                separator
                                area-code
                                separator
                                exchange-code
                                separator
                                subscriber-number))
           (match (string-match nanp-regexp num)))
      (cond (match (replace-match "\\2\\3\\4" nil nil num))
            (t (make-string nanp-length ?0)))))

  (defun area-code (num &optional strict)
    (let ((clean (numbers num strict)))
      (string-match "^\\([[:digit:]]\\{3\\}\\).+" clean)
      (replace-match "\\1" nil nil clean)))

  (defun pprint (num &optional strict)
    (let ((clean (numbers num strict)))
      (string-match (concat "\\([[:digit:]]\\{3\\}\\)"
                            "\\([[:digit:]]\\{3\\}\\)"
                            "\\([[:digit:]]\\{4\\}\\)")
                    clean)
      (replace-match "\(\\1\) \\2-\\3" nil nil clean)))
#+end_src

#+begin_src emacs-lisp
  ELISP> (numbers "1234567890")
  "1234567890"
  ELISP> (numbers "1234567890" t)
  "0000000000"
  ELISP> (area-code "1234567890")
  "123"
  ELISP> (area-code "1234567890" t)
  "000"
  ELISP> (pprint "1234567890")
  "(123) 456-7890"
  ELISP> (pprint "1234567890" t)
  "(000) 000-0000"
#+end_src

** Debugging

#+begin_example
  ...F.F.....

  F invalid-when-11-digits-test
      (ert-test-failed
       ((should
         (equal
          (numbers "21234567890")
          "0000000000"))
        :form
        (equal "21234567890" "0000000000")
        :value nil :explanation
        (arrays-of-different-length 11 10 "21234567890" "0000000000"
      first-mismatch-at 0)))

  F invalid-when-more-than-11-digits-test
      (ert-test-failed
       ((should
         (equal
          (numbers "321234567890")
          "0000000000"))
        :form
        (equal "321234567890" "0000000000")
        :value nil :explanation
        (arrays-of-different-length 12 10 "321234567890" "0000000000"
      first-mismatch-at 0)))
#+end_example

#+begin_src emacs-lisp
  ELISP> (numbers "321234567890")
  "321234567890"
  ELISP> (numbers "21234567890")
  "21234567890"
#+end_src

That's weird. Maybe I need to wrap the whole thing in a =^$=.
