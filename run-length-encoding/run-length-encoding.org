#+title: Run Length Encoding (RLE)

* =run-length-encode=
First attempt:

#+begin_src emacs-lisp
  (defun run-length-encode (s)
    "For string S consisting only of letters A-Z, a-z, and whitespace, replace
  repeated consecutive characters with the number of repetitions followed by the
  character."
    (defun encode-helper (letters prev-letter count acc)
      (let ((letter (car letters)))
        (cond ((string= letter prev-letter)
               (encode-helper (cdr letters) letter (1+ count) acc))
              ((> count 0)
               (encode-helper
                (cdr letters) letter 0 (cons (format "%d%s" letter count) acc)))
              (letter (encode-helper (cdr letters) letter 0 (cons letter acc)))
              (t (mapconcat #'string (reverse acc) "")))))
    (let ((slist (mapcar #'string s)))
      (encode-helper slist "" 0 '())))
#+end_src

Basic recursive algorithm within =encode-helper=, although it's kind of a lot
to look at.

#+begin_example
ELISP> (run-length-encode "foo")
​*** Eval error ***  Format specifier doesn’t match argument type
#+end_example

Guess we'll have to start adding =print= statements to debug.
