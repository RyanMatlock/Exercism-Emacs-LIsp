# stolen from https://tex.stackexchange.com/a/635
#+latex_header: \newcommand{\prefix}[3]{#1\enspace#2\enspace#3}
#+latex_header: \newcommand\Div[2]{(\prefix{/}{#1}{#2})}
#+title: All Your Base IELM testing

* Stuff from weeks ago

#+begin_src emacs-lisp
ELISP> (string-to-number (mapconcat #'identity '("3" "1" "0") ""))
310 (#o466, #x136)
ELISP> (string-to-number (mapconcat #'string '(4 2) ""))
0 (#o0, #x0, ?\C-@)
ELISP> (string-to-number (mapconcat #'identity (mapcar #'string '(4 2)) ""))
0 (#o0, #x0, ?\C-@)
ELISP> (string-to-number (mapconcat #'number-to-string '(4 2) ""))
42 (#o52, #x2a, ?*)
#+end_src

First attempt that got horribly botched

#+begin_src emacs-lisp
(defun rebase (list-of-digits in-base out-base)
  ;; this is just all wrong
  (defun __base10-to-base-n (__base10-digits n)
    "Convert list of digits in base-10 to list of digits in base-n."
    (defun __base10-to-base-n-helper (__base10-num n power accumulator)
      (if (eq __base10-num 0)
          accumulator
        (let* ((divisor (expt n power))
               ;; (remainder (mod __base10-num divisor))
               (remainder (% __base10-num divisor))
               (quotient (/ __base10-num divisor)))
          (__base10-to-base-n-helper
           quotient
           n
           (1+ power)
           (cons remainder accumulator)))))
    (let ((__base10-number (string-to-number
                            (mapconcat #'number-to-string __base10-digits ""))))
      (__base10-to-base-n-helper __base10-number n 0 '())))
  (defun __base-n-to-base10 (__base-n-digits n accumulator)
    "Convert list of digits in base-n to base-10."
    (if __base-n-digits
        (let ((power (1- (length __base-n-digits)))
              (x (car __base-n-digits)))
          ;; recursive step
          (__base-n-to-base10
           (cdr __base-n-digits)
           n
           (cons (* x (expt n power)) accumulator)))
      (apply #'+ accumulator)))
  (error "Delete this S-Expression and write your own implementation"))
#+end_src

* =base-n-to-base-10=

#+begin_src emacs-lisp
  (defun base-n-to-base-10 (digits base-n)
    "Convert DIGITS from BASE-N to base 10 (output is a number)."
    (defun n-to-10-helper (digits base-n acc)
      (if digits
          (let* ((digit (car digits))
                 (power (1- (length digits)))
                 (base-10 (* digit (expt base-n power))))
            (print (format (concat "digit: %d\t"
                                   "power: %d\t"
                                   "base-10: %d\t"
                                   "acc: %d")
                           digit power base-10 acc))
            (n-to-10-helper (cdr digits) base-n (+ base-10 acc))))
      acc)
    (n-to-10-helper digits base-n 0))
#+end_src

Not working, so let's dig into it:

#+begin_src emacs-lisp
  ELISP> (base-n-to-base-10 '(1 0 1 0 1 0) 2)

  "digit: 1   power: 5    base-10: 32 acc: 0"

  "digit: 0   power: 4    base-10: 0  acc: 32"

  "digit: 1   power: 3    base-10: 8  acc: 32"

  "digit: 0   power: 2    base-10: 0  acc: 40"

  "digit: 1   power: 1    base-10: 2  acc: 40"

  "digit: 0   power: 0    base-10: 0  acc: 42"

  0 (#o0, #x0, ?\C-@)
#+end_src

So the 42 is in the accumulator, I just need to get it out.

#+begin_src emacs-lisp
(defun base-n-to-base-10 (digits base-n)
  "Convert DIGITS from BASE-N to base 10 (output is a number)."
  (defun n-to-10-helper (digits base-n acc)
    (if digits
        (let* ((digit (car digits))
               (power (1- (length digits)))
               (base-10 (* digit (expt base-n power))))
          (print (format (concat "digit: %d\t"
                                 "power: %d\t"
                                 "base-10: %d\t"
                                 "acc: %d")
                         digit power base-10 acc))
          (n-to-10-helper (cdr digits) base-n (+ base-10 acc)))
      acc))
  (n-to-10-helper digits base-n 0))
#+end_src

I just had the accumulator in the wrong place/at the wrong level of
parentheses. The print statement really helped with the debugging!

* =base-10-to-base-n= debugging

What I started with:

#+begin_src emacs-lisp
(defun base-10-to-base-n (base-10-num base-n)
  "Convert BASE-10-NUM to a BASE-N number in the form of a list of digits.

Note that
  (base-10-to-base-n (base-n-to-base-10 digits n) n) => digits."
  (defun 10-to-n-helper (num base-n power acc)
    (if (> num 0)
        (let* ((position (expt base-n power))
               (digit (mod num position))
               (rest (- num (* digit position))))
          (10-to-n-helper rest base-n (1+ power) (cons digit acc)))
      acc))
  (10-to-n-helper base-10-num base-n 0 '()))
#+end_src

What I got:

#+begin_src emacs-lisp
ELISP> (base-10-to-base-n 42 2)
(2 2 2 0 0)
#+end_src

Let's print the inner workings and see if we can make heads or tails of this.

#+begin_src emacs-lisp
  (defun base-10-to-base-n (base-10-num base-n)
    "Convert BASE-10-NUM to a BASE-N number in the form of a list of digits.

  Note that
    (base-10-to-base-n (base-n-to-base-10 digits n) n) => digits."
    (defun 10-to-n-helper (num base-n power acc)
      (if (> num 0)
          (let* ((position (expt base-n power))
                 (digit (mod num position))
                 (product (* digit position))
                 (rest (- num product)))
            (print (format (concat "num: %d\t"
                                   "pow: %d\t"
                                   "pos: %d\t"
                                   "prod: %d\t"
                                   "rest: %d\n"
                                   "  acc: %s")
                           num power position product rest acc))
            (10-to-n-helper rest base-n (1+ power) (cons digit acc)))
        acc))
    (10-to-n-helper base-10-num base-n 0 '()))
#+end_src

#+begin_src emacs-lisp
  ELISP> (base-10-to-base-n 42 2)

  "num: 42  pow: 0  pos: 1  prod: 0 rest: 42
    acc: nil"

  "num: 42  pow: 1  pos: 2  prod: 0 rest: 42
    acc: (0)"

  "num: 42  pow: 2  pos: 4  prod: 8 rest: 34
    acc: (0 0)"

  "num: 34  pow: 3  pos: 8  prod: 16    rest: 18
    acc: (2 0 0)"

  "num: 18  pow: 4  pos: 16 prod: 32    rest: -14
    acc: (2 2 0 0)"

  (2 2 2 0 0)
#+end_src

After convincing myself on pen and paper, I realized that you're supposed to go
from the largest position to the smallest, so you'll need to write a helper
function that determines what the largest power of =base-n= is less than or
equal to the base-10 number you're converting. (I think you probably figured
this out in the Roman numeral problem and then just forgot---or didn't realize
that it's the same problem in a sense.)

Here's how it works:[fn::Note that this is integer division.]

#+begin_latex
\begin{align*}
  \Div{42}{2^6} &= 0 \\
  \Div{42}{2^5} &= \fbox{1} \\
  42 - (1 \cdot 2^5) &= 10 \\
  \Div{32}{2^4} &= \fbox{0} \\
  10 - (0 \cdot 2^4) &= 10 \\
  \Div{10}{2^3} &= \fbox{1} \\
  10 - (1 \cdot 2^3) &= 2 \\
  \Div{2}{2^4} &= \fbox{0} \\
  2 - (0 \cdot 2^4) &= 2 \\
  \Div{2}{2^1} &= \fbox{1} \\
  2 - (1 \cdot 2^1) &= 0 \\
  \Div{0}{2^0} &= \fbox{0}
\end{align*}
#+end_latex

Notice that the boxed results are the digits of 42 in base 2.

Getting that largest power looks like:

#+begin_src emacs-lisp
  (defun largest-power-of-n-in-base-10 (base-10-num base-n)
    "Return the largest number P such that
  (> (/ BASE-10-NUM (expt BASE-N P)) 0)."
    (defun largest-power-helper (base10 basen pow)
      (if (> (/ base10 (expt basen pow)) 0)
          (largest-power-helper base10 basen (1+ pow))
        ;; careful here: don't return pow because it's too large
        (1- pow)))
    (largest-power-helper base-10-num base-n 0))
#+end_src

Almost there:

#+begin_src emacs-lisp
(defun base-10-to-base-n (base-10-num base-n)
  "Convert BASE-10-NUM to a BASE-N number in the form of a list of digits.

Note that
  (base-10-to-base-n (base-n-to-base-10 digits n) n) => digits."

  (defun largest-power-of-n-in-base-10 (base-10-num base-n)
    "Return the largest number P such that
(> (/ BASE-10-NUM (expt BASE-N P)) 0)."
    (defun largest-power-helper (base10 basen pow)
      (if (> (/ base10 (expt basen pow)) 0)
          (largest-power-helper base10 basen (1+ pow))
        ;; careful here: don't return pow because it's too large
        (1- pow)))
    (largest-power-helper base-10-num base-n 0))

  (defun 10-to-n-helper (num base-n power acc)
    ;; you could check for num or power to be > 0
    (if (> power 0)
        (let* ((position (expt base-n power)) ;; think of it like 10s place
               (digit (/ num position))
               (remainder (- num (* digit position))))
          ;; note the power decrements -- it has to --  so start with the
          ;; largest power
          (10-to-n-helper remainder base-n (1- power) (cons digit acc)))
      (reverse acc)))

  (10-to-n-helper
   base-10-num
   base-n
   (largest-power-of-n-in-base-10 base-10-num base-n)
   '()))
#+end_src

#+begin_src emacs-lisp
ELISP> (base-10-to-base-n 42 2)
(1 0 1 0 1)
#+end_src

I lopped off the last zero. Going to debug. Switched the return test and still
having that issue.

#+begin_src emacs-lisp
  (defun 10-to-n-helper (num base-n power acc)
    (if (not (equal num 0))
        (let* ((position (expt base-n power)) ;; think of it like 10s place
               (digit (/ num position))
               (remainder (- num (* digit position))))
          (print (format (concat "num: %d\t"
                                 "pow: %d\t"
                                 "pos: %d\t"
                                 "dig: %d\t"
                                 "rem: %d\n\t"
                                 "(rev acc): %s")
                         num power position digit remainder (reverse acc)))
          ;; note the power decrements -- it has to --  so start with the
          ;; largest power
          (10-to-n-helper remainder base-n (1- power) (cons digit acc)))
      (reverse acc)))
#+end_src

#+begin_src emacs-lisp
ELISP> (base-10-to-base-n 42 2)

"num: 42    pow: 5  pos: 32 dig: 1  rem: 10
    (rev acc): nil"

"num: 10    pow: 4  pos: 16 dig: 0  rem: 10
    (rev acc): (1)"

"num: 10    pow: 3  pos: 8  dig: 1  rem: 2
    (rev acc): (1 0)"

"num: 2 pow: 2  pos: 4  dig: 0  rem: 2
    (rev acc): (1 0 1)"

"num: 2 pow: 1  pos: 2  dig: 1  rem: 0
    (rev acc): (1 0 1 0)"

(1 0 1 0 1)
#+end_src

Ok, this is good. I think I should use power to control when the accumulator is
returned actually, and I just need to make sure it includes power == 0.

Got it.

#+begin_src emacs-lisp
ELISP> (base-10-to-base-n 42 2)

"num: 42    pow: 5  pos: 32 dig: 1  rem: 10
    (rev acc): nil"

"num: 10    pow: 4  pos: 16 dig: 0  rem: 10
    (rev acc): (1)"

"num: 10    pow: 3  pos: 8  dig: 1  rem: 2
    (rev acc): (1 0)"

"num: 2 pow: 2  pos: 4  dig: 0  rem: 2
    (rev acc): (1 0 1)"

"num: 2 pow: 1  pos: 2  dig: 1  rem: 0
    (rev acc): (1 0 1 0)"

"num: 0 pow: 0  pos: 1  dig: 0  rem: 0
    (rev acc): (1 0 1 0 1)"

(1 0 1 0 1 0)
#+end_src

Just changed that one line to (included surrounding lines for context)

#+begin_src emacs-lisp
  (defun 10-to-n-helper (num base-n power acc)
    (if (>= power 0) ;;;; <<--- this line
        (let* ((position (expt base-n power)) ;; think of it like 10s place
#+end_src

* Void variable when using =let= for ERT tests

#+begin_src emacs-lisp
(let ((num 923)
      (base-n 7))
  (ert-deftest base-10-to-n-to-10-identity ()
    (should
     (equal num (base-n-to-base-10 (base-10-to-base-n num base-n) base-n)))))
#+end_src

#+begin_example
F base-10-to-n-to-10-identity
    (void-variable num)
#+end_example

Confusing since I've gotten this to work before.

483 and 7 both pulled out of thin air.

#+begin_src emacs-lisp
  ELISP> (base-n-to-base-10 (base-10-to-base-n 42 2) 2)
  42 (#o52, #x2a, ?*)
  ELISP> (base-n-to-base-10 (base-10-to-base-n 483 7) 7)
  483 (#o743, #x1e3)
#+end_src

Hey, it works!

#+begin_src emacs-lisp
  ELISP> (let ((number 2892)
        (base 5))
    (equal number (base-n-to-base-10 (base-10-to-base-n number base) base)))
  t
#+end_src

Ok, so that's working normally.

#+begin_src emacs-lisp
  ELISP> (let ((digits '(9 2 3))
        (base 6))
    (equal digits (base-10-to-base-n (base-n-to-base-10 digits base) base)))
  nil
#+end_src

That's a little confusing.

#+begin_src emacs-lisp
ELISP> (base-n-to-base-10 '(9 2 3) 6)
339 (#o523, #x153)
ELISP> (base-10-to-base-n 339 6)
(1 3 2 3)
#+end_src

+Maybe I screwed something up?+ Wait, no, the identity only works in one
direction: Base-$N$ \to base-10 \to base-$N$, but *not* base-10 \to base-$N$ \to
base-10. That's ok because the whole point of separating these functions out is
that I'm trying to go base-$M$ \to base-10 \to base-$N$; in other words, I'm
transforming $X_M$ into $Y_{10}$, which is then transformed into $Z_N$, which is a
long way of doing $X_M \to Z_N$ [Note that $X_M = Y_{10} = Z_N$.] Wait, is this whole
section wrong???

#+begin_src emacs-lisp
  (ert-deftest base-10-to-n-to-10-identity ()
    ;; for some reason, having let outside of ert-deftest didn't work ¯\_(ツ)_/¯
    (let ((number 2892)
          (base 5))
      (should
       (equal number (base-n-to-base-10 (base-10-to-base-n number base) base)))))
#+end_src

This test passes. Let me try to finish the problem and think about it
more. Ignore my above reasoning. I'll just say that I'm pretty sure I should be
able to go $X_M \to Y_N$ and then $Y_n \to Z_P$, whether $N=10$ or anything
else. Oh, I see what happened above, 923 isn't a valid number in
base-6 :facepalm::facepalm::facepalm:, so of course the identity wouldn't work.

* Passing the =rebase= tests


