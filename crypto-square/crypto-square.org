#+title: Crypto Square

* IELM

#+begin_src emacs-lisp
  ELISP> (take 4 '(:foo :bar :baz))
  (:foo :bar :baz)
#+end_src

[Not sure if I'll actually be able to use =take= given that Exercism complained
about it in the gigasecond project.]

#+begin_src emacs-lisp
  ELISP> (let ((lst (list :foo :bar :baz :qux))
               (r 3)
               (acc '()))
           (dotimes (- r)
             (cons (pop lst) acc))
           (reverse acc))
  nil
#+end_src

Ok, I don't understand =dotimes= yet.

Well, I guess I didn't really have to use it after all because I could just use
=substring= to extract strings and recursion to collect everything. That said,
there's probably a fancier way of doing this with =seq-mapn= or similar
functions.

* Passing locally, failing Exercism's tests

#+begin_example
  We received the following error when we ran your code:
  Loading /mnt/exercism-iteration/crypto-square.el (source)...
  Running 8 tests (2023-04-12 03:35:06+0000, selector `t')
  Test 54-character-plaintext-results-in-7-chunks-the-last-two-with-trailing-spaces backtrace:
    signal(void-function (string-pad))
    apply(signal (void-function (string-pad)))
    (setq value-32 (apply fn-30 args-31))
    (unwind-protect (setq value-32 (apply fn-30 args-31)) (setq form-des
    (if (unwind-protect (setq value-32 (apply fn-30 args-31)) (setq form
    (let (form-description-34) (if (unwind-protect (setq value-32 (apply
    (let ((value-32 'ert-form-evaluation-aborted-33)) (let (form-descrip
    (let* ((fn-30 #'equal) (args-31 (condition-case err (let ((signal-ho
    (let ((lexical-binding t)) (let* ((fn-30 #'equal) (args-31 (conditio
    (closure (t) nil (let ((lexical-binding t)) (let* ((fn-30 #'equal) (
    ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
    ert-run-test(#s(ert-test :name 54-character-plaintext-results-in-7-c
    ert-run-or-rerun-test(#s(ert--stats :selector t :tests [#s(ert-test 
    ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
    ert-run-tests-batch(nil)
    ert-run-tests-batch-and-exit()
    command-line-1(("-l" "ert" "-l" "/mnt/exercism-iteration/crypto-squa
    command-line()
    normal-top-level()
  Test 54-character-plaintext-results-in-7-chunks-the-last-two-with-trailing-spaces condition:
      (void-function string-pad)
     FAILED  1/8  54-character-plaintext-results-in-7-chunks-the-last-two-with-trailing-spaces (0.000226 sec)

  Test 8-character-plaintext-results-in-3-chunks-the-last-one-with-a-trailing-space backtrace:
    signal(void-function (string-pad))
    apply(signal (void-function (string-pad)))
    (setq value-27 (apply fn-25 args-26))
    (unwind-protect (setq value-27 (apply fn-25 args-26)) (setq form-des
    (if (unwind-protect (setq value-27 (apply fn-25 args-26)) (setq form
    (let (form-description-29) (if (unwind-protect (setq value-27 (apply
    (let ((value-27 'ert-form-evaluation-aborted-28)) (let (form-descrip
    (let* ((fn-25 #'equal) (args-26 (condition-case err (let ((signal-ho
    (let ((lexical-binding t)) (let* ((fn-25 #'equal) (args-26 (conditio
    (closure (t) nil (let ((lexical-binding t)) (let* ((fn-25 #'equal) (
    ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
    ert-run-test(#s(ert-test :name 8-character-plaintext-results-in-3-ch
    ert-run-or-rerun-test(#s(ert--stats :selector t :tests [#s(ert-test 
    ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
    ert-run-tests-batch(nil)
    ert-run-tests-batch-and-exit()
    command-line-1(("-l" "ert" "-l" "/mnt/exercism-iteration/crypto-squa
    command-line()
    normal-top-level()
  Test 8-character-plaintext-results-in-3-chunks-the-last-one-with-a-trailing-space condition:
      (void-function string-pad)
     FAILED  2/8  8-character-plaintext-results-in-3-chunks-the-last-one-with-a-trailing-space (0.000141 sec)

  Test 9-character-plaintext-results-in-3-chunks-of-3-characters backtrace:
    signal(void-function (string-pad))
    apply(signal (void-function (string-pad)))
    (setq value-22 (apply fn-20 args-21))
    (unwind-protect (setq value-22 (apply fn-20 args-21)) (setq form-des
    (if (unwind-protect (setq value-22 (apply fn-20 args-21)) (setq form
    (let (form-description-24) (if (unwind-protect (setq value-22 (apply
    (let ((value-22 'ert-form-evaluation-aborted-23)) (let (form-descrip
    (let* ((fn-20 #'equal) (args-21 (condition-case err (let ((signal-ho
    (let ((lexical-binding t)) (let* ((fn-20 #'equal) (args-21 (conditio
    (closure (t) nil (let ((lexical-binding t)) (let* ((fn-20 #'equal) (
    ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
    ert-run-test(#s(ert-test :name 9-character-plaintext-results-in-3-ch
    ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
    ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
    ert-run-tests-batch(nil)
    ert-run-tests-batch-and-exit()
    command-line-1(("-l" "ert" "-l" "/mnt/exercism-iteration/crypto-squa
    command-line()
    normal-top-level()
  Test 9-character-plaintext-results-in-3-chunks-of-3-characters condition:
      (void-function string-pad)
     FAILED  3/8  9-character-plaintext-results-in-3-chunks-of-3-characters (0.000148 sec)

  Test empty-plaintext-results-in-an-empty-ciphertext backtrace:
    signal(void-function (string-pad))
    apply(signal (void-function (string-pad)))
    (setq value-2 (apply fn-0 args-1))
    (unwind-protect (setq value-2 (apply fn-0 args-1)) (setq form-descri
    (if (unwind-protect (setq value-2 (apply fn-0 args-1)) (setq form-de
    (let (form-description-4) (if (unwind-protect (setq value-2 (apply f
    (let ((value-2 'ert-form-evaluation-aborted-3)) (let (form-descripti
    (let* ((fn-0 #'equal) (args-1 (condition-case err (let ((signal-hook
    (let ((lexical-binding t)) (let* ((fn-0 #'equal) (args-1 (condition-
    (closure (t) nil (let ((lexical-binding t)) (let* ((fn-0 #'equal) (a
    ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
    ert-run-test(#s(ert-test :name empty-plaintext-results-in-an-empty-c
    ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
    ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
    ert-run-tests-batch(nil)
    ert-run-tests-batch-and-exit()
    command-line-1(("-l" "ert" "-l" "/mnt/exercism-iteration/crypto-squa
    command-line()
    normal-top-level()
  Test empty-plaintext-results-in-an-empty-ciphertext condition:
      (void-function string-pad)
     FAILED  4/8  empty-plaintext-results-in-an-empty-ciphertext (0.000132 sec)

  Test lowercase backtrace:
    signal(void-function (string-pad))
    apply(signal (void-function (string-pad)))
    (setq value-7 (apply fn-5 args-6))
    (unwind-protect (setq value-7 (apply fn-5 args-6)) (setq form-descri
    (if (unwind-protect (setq value-7 (apply fn-5 args-6)) (setq form-de
    (let (form-description-9) (if (unwind-protect (setq value-7 (apply f
    (let ((value-7 'ert-form-evaluation-aborted-8)) (let (form-descripti
    (let* ((fn-5 #'equal) (args-6 (condition-case err (let ((signal-hook
    (let ((lexical-binding t)) (let* ((fn-5 #'equal) (args-6 (condition-
    (closure (t) nil (let ((lexical-binding t)) (let* ((fn-5 #'equal) (a
    ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
    ert-run-test(#s(ert-test :name lowercase :documentation nil :body (c
    ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
    ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
    ert-run-tests-batch(nil)
    ert-run-tests-batch-and-exit()
    command-line-1(("-l" "ert" "-l" "/mnt/exercism-iteration/crypto-squa
    command-line()
    normal-top-level()
  Test lowercase condition:
      (void-function string-pad)
     FAILED  5/8  lowercase (0.000133 sec)

  Test normalization-results-in-empty-plaintext backtrace:
    signal(void-function (string-pad))
    apply(signal (void-function (string-pad)))
    (setq value-37 (apply fn-35 args-36))
    (unwind-protect (setq value-37 (apply fn-35 args-36)) (setq form-des
    (if (unwind-protect (setq value-37 (apply fn-35 args-36)) (setq form
    (let (form-description-39) (if (unwind-protect (setq value-37 (apply
    (let ((value-37 'ert-form-evaluation-aborted-38)) (let (form-descrip
    (let* ((fn-35 #'equal) (args-36 (condition-case err (let ((signal-ho
    (let ((lexical-binding t)) (let* ((fn-35 #'equal) (args-36 (conditio
    (closure (t) nil (let ((lexical-binding t)) (let* ((fn-35 #'equal) (
    ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
    ert-run-test(#s(ert-test :name normalization-results-in-empty-plaint
    ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
    ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
    ert-run-tests-batch(nil)
    ert-run-tests-batch-and-exit()
    command-line-1(("-l" "ert" "-l" "/mnt/exercism-iteration/crypto-squa
    command-line()
    normal-top-level()
  Test normalization-results-in-empty-plaintext condition:
      (void-function string-pad)
     FAILED  6/8  normalization-results-in-empty-plaintext (0.000135 sec)

  Test remove-punctuation backtrace:
    signal(void-function (string-pad))
    apply(signal (void-function (string-pad)))
    (setq value-17 (apply fn-15 args-16))
    (unwind-protect (setq value-17 (apply fn-15 args-16)) (setq form-des
    (if (unwind-protect (setq value-17 (apply fn-15 args-16)) (setq form
    (let (form-description-19) (if (unwind-protect (setq value-17 (apply
    (let ((value-17 'ert-form-evaluation-aborted-18)) (let (form-descrip
    (let* ((fn-15 #'equal) (args-16 (condition-case err (let ((signal-ho
    (let ((lexical-binding t)) (let* ((fn-15 #'equal) (args-16 (conditio
    (closure (t) nil (let ((lexical-binding t)) (let* ((fn-15 #'equal) (
    ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
    ert-run-test(#s(ert-test :name remove-punctuation :documentation nil
    ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
    ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
    ert-run-tests-batch(nil)
    ert-run-tests-batch-and-exit()
    command-line-1(("-l" "ert" "-l" "/mnt/exercism-iteration/crypto-squa
    command-line()
    normal-top-level()
  Test remove-punctuation condition:
      (void-function string-pad)
     FAILED  7/8  remove-punctuation (0.000147 sec)

  Test remove-spaces backtrace:
    signal(void-function (string-pad))
    apply(signal (void-function (string-pad)))
    (setq value-12 (apply fn-10 args-11))
    (unwind-protect (setq value-12 (apply fn-10 args-11)) (setq form-des
    (if (unwind-protect (setq value-12 (apply fn-10 args-11)) (setq form
    (let (form-description-14) (if (unwind-protect (setq value-12 (apply
    (let ((value-12 'ert-form-evaluation-aborted-13)) (let (form-descrip
    (let* ((fn-10 #'equal) (args-11 (condition-case err (let ((signal-ho
    (let ((lexical-binding t)) (let* ((fn-10 #'equal) (args-11 (conditio
    (closure (t) nil (let ((lexical-binding t)) (let* ((fn-10 #'equal) (
    ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
    ert-run-test(#s(ert-test :name remove-spaces :documentation nil :bod
    ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
    ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
    ert-run-tests-batch(nil)
    ert-run-tests-batch-and-exit()
    command-line-1(("-l" "ert" "-l" "/mnt/exercism-iteration/crypto-squa
    command-line()
    normal-top-level()
  Test remove-spaces condition:
      (void-function string-pad)
     FAILED  8/8  remove-spaces (0.000145 sec)


  Ran 8 tests, 0 results as expected, 8 unexpected (2023-04-12 03:35:07+0000, 1.063684 sec)

  8 unexpected results:
     FAILED  54-character-plaintext-results-in-7-chunks-the-last-two-with-trailing-spaces

     FAILED  8-character-plaintext-results-in-3-chunks-the-last-one-with-a-trailing-space

     FAILED  9-character-plaintext-results-in-3-chunks-of-3-characters

     FAILED  empty-plaintext-results-in-an-empty-ciphertext

     FAILED  lowercase

     FAILED  normalization-results-in-empty-plaintext

     FAILED  remove-punctuation

     FAILED  remove-spaces
#+end_example

I guess I'm not allowed to use =string-pad=, so I'll have to write my own.

Well, it passed with the DIY =cb--string-pad= function.

* Refactoring

#+begin_src emacs-lisp
  (defun normalized-text-to-block (text)
    "Convert string TEXT to a list of strings of length R, given by the
  (CAR (RECTANGLE-VALUES TEXT))."
    ;; padding shouldn't change the values of r and c, so we can recalculate r
    ;; here
    (let* ((rect-vals (rectangle-values text))
           (r (car rect-vals)))
      (defun nt2b-helper (text acc)
        (if (not (zerop (length text)))
            (nt2b-helper (substring text r) (cons (substring text 0 r) acc))
          (reverse acc)))
      (nt2b-helper text '())))

  (defun block-to-ciphertext (block &optional sep)
    "Convert BLOCK (a list of strings of identical size) to cipher text separated
  by SEP, which defaults to the space character."
    (defun b2ct-helper (bs block index acc)
      (if (< index bs)
          (let ((chunk
                 (mapconcat
                  #'string
                  (mapcar #'(lambda (str) (elt str index)) block) "")))
            (b2ct-helper bs block (1+ index) (cons chunk acc)))
        (reverse acc)))
    (let ((block-size (length (car block)))
          (sep (or sep " ")))
      (mapconcat #'identity (b2ct-helper block-size block 0 '()) sep)))
#+end_src

I think there's probably a smarter way of doing these that doesn't use
recursion.

#+begin_src emacs-lisp
  (defun normalized-text-to-block (text)
    "Convert string TEXT to a list of strings of length R, given by the
  (CAR (RECTANGLE-VALUES TEXT))."
    ;; padding shouldn't change the values of r and c, so we can recalculate r
    ;; here
    (let* ((rect-vals (rectangle-values text))
           (r (car rect-vals))
           (c (cdr rect-vals))
           (indices-alist '((0 . 3) (3 . 6) (6 . 9))))
      ;; (defun nt2b-helper (text acc)
      ;;   (if (not (zerop (length text)))
      ;;       (nt2b-helper (substring text r) (cons (substring text 0 r) acc))
      ;;     (reverse acc)))
      ;; (nt2b-helper text '())
      (seq-mapn #'(lambda (indices) (let ((start (car indices))
                                          (end (cdr indices)))
                                      (substring text start end)))
                indices-alist)))
#+end_src

I plugged in the indices I knew worked for the =foobarbaz= input, so I just
need to figure out how to determine them programatically.

#+begin_src emacs-lisp
  (defun normalized-text-to-block (text)
    "Convert string TEXT to a list of strings of length R, given by the
  (CAR (RECTANGLE-VALUES TEXT))."
    ;; padding shouldn't change the values of r and c, so we can recalculate r
    ;; here
    (let* ((rect-vals (rectangle-values text))
           (r (car rect-vals))
           (c (cdr rect-vals))
           (starts '(0 3 6))
           (ends '(3 6 9))
           (indices-alist (seq-mapn #'(lambda (x y) (cons x y))
                                    starts
                                    ends)))
      (seq-mapn #'(lambda (indices) (let ((start (car indices))
                                          (end (cdr indices)))
                                      (substring text start end)))
                indices-alist)))
#+end_src

Thinking about it in terms of starts and ends separately is helpful. It needs
to be a =number-sequence=, but figuring out where to use =r= and =c= is a
little tricky. Actually, no it's not; we know that the sequences are all of
length =r=.

#+begin_src emacs-lisp
  ELISP> (let ((r 3)
               (len 9))
  (number-sequence 0 (- len r) r))
  (0 3 6)

  ELISP> (let ((r 3)
               (len 9))
  (number-sequence r len r))
  (3 6 9)
#+end_src

#+begin_src emacs-lisp
  (defun normalized-text-to-block (text)
    "Convert string TEXT to a list of strings of length R, given by the
  (CAR (RECTANGLE-VALUES TEXT))."
    ;; padding shouldn't change the values of r and c, so we can recalculate r
    ;; here
    (let* ((rect-vals (rectangle-values text))
           (block-size (car rect-vals))
           (text-len (length text))
           (starts (number-sequence 0 (- text-len block-size) block-size))
           (ends (number-sequence block-size text-len block-size))
           (indices-alist (seq-mapn #'(lambda (x y) (cons x y))
                                    starts
                                    ends)))
      (seq-mapn #'(lambda (indices) (let ((start (car indices))
                                          (end (cdr indices)))
                                      (substring text start end)))
                indices-alist)))
#+end_src

It works!

#+begin_src emacs-lisp
  (defun block-to-ciphertext (block &optional sep)
    "Convert BLOCK (a list of strings of identical size) to cipher text separated
  by SEP, which defaults to the space character."
    ;; (defun b2ct-helper (bs block index acc)
    ;;   (if (< index bs)
    ;;       (let ((chunk
    ;;              (mapconcat
    ;;               #'string
    ;;               (mapcar #'(lambda (str) (elt str index)) block) "")))
    ;;         (b2ct-helper bs block (1+ index) (cons chunk acc)))
    ;;     (reverse acc)))
    (let ((block-size (length (car block)))
          (sep (or sep " "))
          (indices (number-sequence 0 (1- block-size))))
      (mapconcat #'identity
                 (mapconcat #'(lambda (i) nil)
                            (mapcar #'(lambda (str) (elt str i)) block)
                            indices)
                 sep)))
#+end_src

This is all wrong, and I'm struggling with it.

#+begin_src emacs-lisp
  ELISP> (let* ((str "foo")
                (indices (number-sequence 0 (1- (length str)))))
  (mapconcat #'string (mapcar #'(lambda (i) (elt str i)) indices) ""))
  "foo"
#+end_src

For some reason, I'm still not getting how to bind a variable to the elements
of the =block=.

#+begin_src emacs-lisp
    ELISP> (let* ((block '("foo" "bar" "baz"))
                  (bs (length (car block)))
                  (indices (number-sequence 0 (1- bs)))
                  (str nil))
             (mapconcat #'(lambda (s) (setq str s))
                        (mapconcat #'(lambda (i) (string (elt
                                                          str i)))
                                   indices ".")))
#+end_src

I mean, that certainly isn't even close to right.

As always, I turn to stackoverflow ([[https://stackoverflow.com/a/45865100][Nested mapcars in common lisp]]):

#+begin_src common-lisp
  (mapcan (lambda (x)
            (mapcar (lambda (y) (list x y))
                    '(aa bb cc dd)))
          '(a b c))
  ==> ((A AA) (A BB) (A CC) (A DD)
       (B AA) (B BB) (B CC) (B DD)
       (C AA) (C BB) (C CC) (C DD))
#+end_src
